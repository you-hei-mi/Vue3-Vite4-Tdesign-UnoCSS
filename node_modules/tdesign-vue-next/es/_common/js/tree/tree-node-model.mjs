/**
 * tdesign v1.9.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _classCallCheck, a as _createClass } from '../../../_chunks/dep-12bcaf4a.mjs';
import { _ as _defineProperty } from '../../../_chunks/dep-7deaa3b9.mjs';
import { i as isUndefined_1 } from '../../../_chunks/dep-ac561548.mjs';
import { i as isBoolean_1 } from '../../../_chunks/dep-03dfef8f.mjs';
import { o as omit_1 } from '../../../_chunks/dep-8fdb2da0.mjs';
import { g as get_1 } from '../../../_chunks/dep-cedc2818.mjs';
import log from '../log/log.mjs';
import '../../../_chunks/dep-8dbc9855.mjs';
import '../../../_chunks/dep-cb814df4.mjs';
import '../../../_chunks/dep-cd533155.mjs';
import '../../../_chunks/dep-2adf18a2.mjs';
import '../../../_chunks/dep-67e59a11.mjs';
import '../../../_chunks/dep-ab439391.mjs';
import '../../../_chunks/dep-60d62610.mjs';
import '../../../_chunks/dep-10024af3.mjs';
import '../../../_chunks/dep-31dc0415.mjs';
import '../../../_chunks/dep-e5142249.mjs';
import '../../../_chunks/dep-c4f80cb4.mjs';
import '../../../_chunks/dep-996b4900.mjs';
import '../../../_chunks/dep-66473aa9.mjs';
import '../../../_chunks/dep-715774e0.mjs';
import '../../../_chunks/dep-5a5a1764.mjs';
import '../../../_chunks/dep-3108c312.mjs';
import '../../../_chunks/dep-93498383.mjs';
import '../../../_chunks/dep-36582a92.mjs';
import '../../../_chunks/dep-a2db6df1.mjs';
import '../../../_chunks/dep-0f89a1dd.mjs';
import '../../../_chunks/dep-d4da440a.mjs';
import '../../../_chunks/dep-013382c3.mjs';
import '../../../_chunks/dep-ca764006.mjs';
import '../../../_chunks/dep-2ee9d497.mjs';
import '../../../_chunks/dep-c545db54.mjs';
import '../../../_chunks/dep-3f15cb30.mjs';
import '../../../_chunks/dep-fd2b6c64.mjs';
import '../../../_chunks/dep-8dae3bca.mjs';
import '../../../_chunks/dep-d7c36095.mjs';
import '../../../_chunks/dep-ec2f76cc.mjs';
import '../../../_chunks/dep-8a3fd140.mjs';
import '../../../_chunks/dep-4481f632.mjs';
import '../../../_chunks/dep-396d852b.mjs';
import '../../../_chunks/dep-6861d388.mjs';

var nodeKey = "__tdesign_tree-node__";
var TreeNodeModel = /*#__PURE__*/function () {
  function TreeNodeModel(node) {
    _classCallCheck(this, TreeNodeModel);
    _defineProperty(this, nodeKey, void 0);
    this[nodeKey] = node;
  }
  _createClass(TreeNodeModel, [{
    key: "value",
    get: function get() {
      var node = this[nodeKey];
      return node.value;
    }
  }, {
    key: "label",
    get: function get() {
      var node = this[nodeKey];
      return node.label;
    }
  }, {
    key: "data",
    get: function get() {
      var node = this[nodeKey];
      return node.data;
    }
  }, {
    key: "actived",
    get: function get() {
      var node = this[nodeKey];
      return node.actived;
    }
  }, {
    key: "expanded",
    get: function get() {
      var node = this[nodeKey];
      return node.expanded;
    }
  }, {
    key: "checked",
    get: function get() {
      var node = this[nodeKey];
      return node.checked;
    }
  }, {
    key: "indeterminate",
    get: function get() {
      var node = this[nodeKey];
      return node.indeterminate;
    }
  }, {
    key: "loading",
    get: function get() {
      var node = this[nodeKey];
      return node.loading;
    }
  }, {
    key: "disabled",
    get: function get() {
      var node = this[nodeKey];
      return node.isDisabled();
    }
  }, {
    key: "getLevel",
    value: function getLevel() {
      var node = this[nodeKey];
      return node.getLevel();
    }
  }, {
    key: "getIndex",
    value: function getIndex() {
      var node = this[nodeKey];
      return node.getIndex();
    }
  }, {
    key: "isFirst",
    value: function isFirst() {
      var node = this[nodeKey];
      return node.isFirst();
    }
  }, {
    key: "isLast",
    value: function isLast() {
      var node = this[nodeKey];
      return node.isLast();
    }
  }, {
    key: "isLeaf",
    value: function isLeaf() {
      var node = this[nodeKey];
      return node.isLeaf();
    }
  }, {
    key: "insertBefore",
    value: function insertBefore(newData) {
      var node = this[nodeKey];
      return node.insertBefore(newData);
    }
  }, {
    key: "insertAfter",
    value: function insertAfter(newData) {
      var node = this[nodeKey];
      return node.insertAfter(newData);
    }
  }, {
    key: "appendData",
    value: function appendData(data) {
      var node = this[nodeKey];
      return node.append(data);
    }
  }, {
    key: "getPath",
    value: function getPath() {
      var node = this[nodeKey];
      var nodes = node.getPath();
      return nodes.map(function (item) {
        return item.getModel();
      });
    }
  }, {
    key: "getParent",
    value: function getParent() {
      var _node$parent;
      var node = this[nodeKey];
      return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
    }
  }, {
    key: "getParents",
    value: function getParents() {
      var node = this[nodeKey];
      var nodes = node.getParents();
      return nodes.map(function (item) {
        return item.getModel();
      });
    }
  }, {
    key: "getRoot",
    value: function getRoot() {
      var node = this[nodeKey];
      var root = node.getRoot();
      return root === null || root === void 0 ? void 0 : root.getModel();
    }
  }, {
    key: "getSiblings",
    value: function getSiblings() {
      var node = this[nodeKey];
      var nodes = node.getSiblings();
      return nodes.map(function (item) {
        return item.getModel();
      });
    }
  }, {
    key: "getChildren",
    value: function getChildren(deep) {
      var node = this[nodeKey];
      var childrenModel = false;
      var children = node.children;
      if (Array.isArray(children)) {
        if (children.length > 0) {
          if (deep) {
            var nodes = node.walk();
            nodes.shift();
            childrenModel = nodes.map(function (item) {
              return item.getModel();
            });
          } else {
            childrenModel = children.map(function (item) {
              return item.getModel();
            });
          }
        } else {
          childrenModel = false;
        }
      } else if (isBoolean_1(children)) {
        childrenModel = children;
      }
      return childrenModel;
    }
  }, {
    key: "remove",
    value: function remove(value) {
      var node = this[nodeKey];
      if (!value) {
        node.remove();
        return;
      }
      var tree = node.tree;
      var targetNode = tree.getNode(value);
      if (!targetNode) {
        log.warnOnce("Tree", "`".concat(value, "` is not exist"));
        return;
      }
      var parents = targetNode.getParents();
      var parentValues = parents.map(function (pnode) {
        return pnode.value;
      });
      if (parentValues.indexOf(node.value) < 0) {
        log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
        return;
      }
      targetNode.remove();
    }
  }, {
    key: "setData",
    value: function setData(data) {
      var node = this[nodeKey];
      var syncAttrs = ["value", "label", "disabled"];
      var cleanData = omit_1(data, ["children"].concat(syncAttrs));
      var keys = node.tree.config.keys;
      syncAttrs.forEach(function (attr) {
        var dataAttrValue = get_1(data, (keys === null || keys === void 0 ? void 0 : keys[attr]) || attr);
        if (!isUndefined_1(dataAttrValue)) cleanData[attr] = dataAttrValue;
      });
      Object.assign(node.data, cleanData);
      Object.assign(node, cleanData);
      node.update();
    }
  }]);
  return TreeNodeModel;
}();
function createNodeModel(node) {
  var model = new TreeNodeModel(node);
  return model;
}

export { TreeNodeModel, createNodeModel, nodeKey };
//# sourceMappingURL=tree-node-model.mjs.map
