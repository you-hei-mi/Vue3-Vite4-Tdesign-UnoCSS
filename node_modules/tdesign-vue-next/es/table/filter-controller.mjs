/**
 * tdesign v1.9.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-7deaa3b9.mjs';
import { _ as _typeof } from '../_chunks/dep-8dbc9855.mjs';
import { defineComponent, ref, h, createVNode, mergeProps } from 'vue';
import { FilterIcon } from 'tdesign-icons-vue-next';
import { i as isEmpty_1 } from '../_chunks/dep-60ee423b.mjs';
import { Popup } from '../popup/index.mjs';
import { CheckboxGroup } from '../checkbox/index.mjs';
import { RadioGroup } from '../radio/index.mjs';
import { Input } from '../input/index.mjs';
import { Button } from '../button/index.mjs';
import { useTNodeDefault } from '../hooks/tnode.mjs';
import '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { i as isFunction_1 } from '../_chunks/dep-66473aa9.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-cb814df4.mjs';
import '../_chunks/dep-c545db54.mjs';
import '../_chunks/dep-d4da440a.mjs';
import '../_chunks/dep-cd533155.mjs';
import '../_chunks/dep-013382c3.mjs';
import '../_chunks/dep-3108c312.mjs';
import '../_chunks/dep-2adf18a2.mjs';
import '../_chunks/dep-ca764006.mjs';
import '../_chunks/dep-996b4900.mjs';
import '../_chunks/dep-715774e0.mjs';
import '../_chunks/dep-5a5a1764.mjs';
import '../_chunks/dep-3f15cb30.mjs';
import '../_chunks/dep-0f89a1dd.mjs';
import '../_chunks/dep-ab439391.mjs';
import '../_chunks/dep-60d62610.mjs';
import '../popup/popup.mjs';
import '../_chunks/dep-b089fa1f.mjs';
import '../_chunks/dep-8e411f1c.mjs';
import '@popperjs/core';
import '../_chunks/dep-665d45b4.mjs';
import '../_chunks/dep-27be073b.mjs';
import '../_chunks/dep-10024af3.mjs';
import '../_chunks/dep-30b3f256.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../_chunks/dep-37e3e644.mjs';
import '../_chunks/dep-31dc0415.mjs';
import '../_chunks/dep-e5142249.mjs';
import '../_chunks/dep-c4f80cb4.mjs';
import '../_chunks/dep-93498383.mjs';
import '../_chunks/dep-36582a92.mjs';
import '../_chunks/dep-a2db6df1.mjs';
import '../_chunks/dep-2ee9d497.mjs';
import '../_chunks/dep-fd2b6c64.mjs';
import '../_chunks/dep-b3734774.mjs';
import '../_chunks/dep-a4a3ac25.mjs';
import '../_chunks/dep-6861d388.mjs';
import '../_chunks/dep-396d852b.mjs';
import '../_chunks/dep-8a3fd140.mjs';
import '../_chunks/dep-5db0da5c.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-bf19d9ba.mjs';
import '../_chunks/dep-6963a882.mjs';
import '../config-provider/type.mjs';
import '../hooks/useDefaultValue.mjs';
import '../_chunks/dep-bd7cd061.mjs';
import '../_chunks/dep-96484611.mjs';
import '../_chunks/dep-67e59a11.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_common/js/upload/utils.mjs';
import '../_common/js/log/log.mjs';
import '../_chunks/dep-f8909853.mjs';
import '../_chunks/dep-d00e2e04.mjs';
import '../_chunks/dep-ec2f76cc.mjs';
import '../utils/render-tnode.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-b15588b0.mjs';
import '../popup/props.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../checkbox/checkbox.mjs';
import '../checkbox/props.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';
import '../checkbox/hooks/useKeyboardEvent.mjs';
import '../_common/js/common.mjs';
import '../hooks/useDisabled.mjs';
import '../_chunks/dep-03dfef8f.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-c628112b.mjs';
import '../_chunks/dep-1aab510a.mjs';
import '../_chunks/dep-931fe368.mjs';
import '../_chunks/dep-ac561548.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../checkbox/type.mjs';
import '../radio/radio.mjs';
import '../utils/helper.mjs';
import '../_chunks/dep-807e1747.mjs';
import '../_chunks/dep-413fbf03.mjs';
import '../_chunks/dep-0e4de31a.mjs';
import '../radio/props.mjs';
import '../radio/constants.mjs';
import '../form/hooks.mjs';
import '../radio/group.mjs';
import '../_chunks/dep-f14cdac0.mjs';
import '../_chunks/dep-cd711cee.mjs';
import '../_chunks/dep-cede586b.mjs';
import '../radio/radio-group-props.mjs';
import '../radio/useKeyboard.mjs';
import '../watermark/hooks.mjs';
import '../radio/radio-button.mjs';
import '../radio/type.mjs';
import '../input/input.mjs';
import '../input/props.mjs';
import '../input/useInput.mjs';
import '../form/const.mjs';
import '../input/useLengthLimit.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/utils/helper.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../input/input-group.mjs';
import '../input/input-group-props.mjs';
import '../input/type.mjs';
import '../button/button.mjs';
import '../loading/index.mjs';
import '../_chunks/dep-503b7515.mjs';
import '../_chunks/dep-e32ac680.mjs';
import '../_chunks/dep-230c1b47.mjs';
import '../_chunks/dep-cedc2818.mjs';
import '../_chunks/dep-8dae3bca.mjs';
import '../_chunks/dep-41db3bc9.mjs';
import '../_chunks/dep-da57e0cf.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../loading/props.mjs';
import '../hooks/useTeleport.mjs';
import '../loading/type.mjs';
import '../button/props.mjs';
import '../button/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var TableFilterController = defineComponent({
  name: "TableFilterController",
  props: {
    locale: Object,
    column: Object,
    colIndex: Number,
    tFilterValue: Object,
    innerFilterValue: Object,
    tableFilterClasses: Object,
    isFocusClass: String,
    primaryTableElement: {},
    popupProps: Object,
    attach: [String, Function],
    onVisibleChange: Function
  },
  emits: ["inner-filter-change", "reset", "confirm"],
  setup: function setup(props, context) {
    var triggerElementRef = ref(null);
    var renderTNode = useTNodeDefault();
    var _useConfig = useConfig("table", props.locale),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        FilterIcon: FilterIcon
      }),
      FilterIcon$1 = _useGlobalIcon.FilterIcon;
    var filterPopupVisible = ref(false);
    var onFilterPopupVisibleChange = function onFilterPopupVisibleChange(visible) {
      var _props$onVisibleChang;
      filterPopupVisible.value = visible;
      (_props$onVisibleChang = props.onVisibleChange) === null || _props$onVisibleChang === void 0 || _props$onVisibleChang.call(props, visible);
    };
    var renderComponent = function renderComponent(column, filterComponentProps, component) {
      if (!component) return null;
      var isVueComponent = !!component.setup;
      if (isFunction_1(column.filter.component) && !isVueComponent) {
        return column.filter.component(function (v, b) {
          var tProps = _typeof(b) === "object" && "attrs" in b ? b.attrs : {};
          return h(v, {
            props: _objectSpread(_objectSpread({}, filterComponentProps), tProps)
          });
        });
      }
      var filter = column.filter || {};
      return createVNode(component, mergeProps({
        "class": filter.classNames,
        "style": filter.style
      }, filter.attrs, filterComponentProps), null);
    };
    var getFilterContent = function getFilterContent(column) {
      var _column$filter, _column$filter2;
      var types = ["single", "multiple", "input"];
      if (column.type && !types.includes(column.filter.type)) {
        console.error("TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
        return;
      }
      var _props$innerFilterVal = props.innerFilterValue,
        innerFilterValue = _props$innerFilterVal === void 0 ? {} : _props$innerFilterVal;
      var component = {
        single: RadioGroup,
        multiple: CheckboxGroup,
        input: Input
      }[column.filter.type] || column.filter.component;
      if (!component && !column.filter.component) return;
      var filterComponentProps = _objectSpread(_objectSpread({
        options: ["single", "multiple"].includes(column.filter.type) ? (_column$filter = column.filter) === null || _column$filter === void 0 ? void 0 : _column$filter.list : void 0
      }, ((_column$filter2 = column.filter) === null || _column$filter2 === void 0 ? void 0 : _column$filter2.props) || {}), {}, {
        onChange: function onChange(val, ctx) {
          var _column$filter$props, _column$filter3;
          context.emit("inner-filter-change", val, column);
          if ((_column$filter$props = column.filter.props) !== null && _column$filter$props !== void 0 && _column$filter$props.onChange) {
            var _column$filter$props$, _column$filter$props2;
            (_column$filter$props$ = (_column$filter$props2 = column.filter.props).onChange) === null || _column$filter$props$ === void 0 || _column$filter$props$.call(_column$filter$props2, val, ctx);
          }
          if ((_column$filter3 = column.filter) !== null && _column$filter3 !== void 0 && (_column$filter3 = _column$filter3.confirmEvents) !== null && _column$filter3 !== void 0 && _column$filter3.includes("onChange")) {
            filterPopupVisible.value = false;
          }
        }
      });
      if (column.colKey && innerFilterValue && column.colKey in innerFilterValue) {
        filterComponentProps.value = innerFilterValue === null || innerFilterValue === void 0 ? void 0 : innerFilterValue[column.colKey];
      }
      if (column.filter.confirmEvents) {
        column.filter.confirmEvents.forEach(function (event) {
          if (event === "onChange") return;
          filterComponentProps[event] = function () {
            context.emit("confirm", column);
            filterPopupVisible.value = false;
          };
        });
      }
      return createVNode("div", {
        "class": props.tableFilterClasses.contentInner
      }, [renderComponent(column, filterComponentProps, component)]);
    };
    var getBottomButtons = function getBottomButtons(column) {
      if (!column.filter.showConfirmAndReset) return;
      return createVNode("div", {
        "class": props.tableFilterClasses.bottomButtons
      }, [createVNode(Button, {
        "theme": "default",
        "size": "small",
        "onClick": function onClick() {
          context.emit("reset", column);
          filterPopupVisible.value = false;
        }
      }, {
        "default": function _default() {
          return [globalConfig.value.resetText];
        }
      }), createVNode(Button, {
        "theme": "primary",
        "size": "small",
        "onClick": function onClick() {
          context.emit("confirm", column);
          filterPopupVisible.value = false;
        }
      }, {
        "default": function _default() {
          return [globalConfig.value.confirmText];
        }
      })]);
    };
    var getContent = function getContent() {
      return createVNode("div", {
        "class": props.tableFilterClasses.popupContent
      }, [getFilterContent(props.column), getBottomButtons(props.column)]);
    };
    return {
      t: t,
      globalConfig: globalConfig,
      FilterIcon: FilterIcon$1,
      filterPopupVisible: filterPopupVisible,
      triggerElementRef: triggerElementRef,
      renderTNode: renderTNode,
      getContent: getContent,
      onFilterPopupVisibleChange: onFilterPopupVisibleChange
    };
  },
  render: function render() {
    var _this$tFilterValue,
      _this = this;
    var column = this.column,
      popupProps = this.popupProps,
      FilterIcon = this.FilterIcon;
    if (!column.filter || column.filter && !Object.keys(column.filter).length) return null;
    var defaultFilterIcon = this.t(this.globalConfig.filterIcon) || createVNode(FilterIcon, null, null);
    var filterValue = (_this$tFilterValue = this.tFilterValue) === null || _this$tFilterValue === void 0 ? void 0 : _this$tFilterValue[column.colKey];
    var isObjectTrue = _typeof(filterValue) === "object" && !isEmpty_1(filterValue);
    var isValueExist = ![null, void 0, ""].includes(filterValue) && _typeof(filterValue) !== "object";
    return createVNode(Popup, mergeProps({
      "attach": this.attach || (this.primaryTableElement ? function () {
        return _this.primaryTableElement;
      } : void 0),
      "visible": this.filterPopupVisible,
      "destroyOnClose": true,
      "trigger": "click",
      "placement": "bottom-right",
      "showArrow": true,
      "overlayClassName": this.tableFilterClasses.popup,
      "onVisibleChange": function onVisibleChange(val) {
        return _this.onFilterPopupVisibleChange(val);
      },
      "class": [this.tableFilterClasses.icon, _defineProperty({}, this.isFocusClass, isObjectTrue || isValueExist)],
      "content": this.getContent
    }, popupProps), {
      "default": function _default() {
        return [createVNode("div", {
          "ref": "triggerElementRef"
        }, [_this.renderTNode("filterIcon", {
          defaultNode: defaultFilterIcon,
          params: {
            col: column,
            colIndex: _this.colIndex
          }
        })])];
      }
    });
  }
});

export { TableFilterController as default };
//# sourceMappingURL=filter-controller.mjs.map
