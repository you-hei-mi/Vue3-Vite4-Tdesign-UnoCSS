/**
 * tdesign v1.9.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-b15588b0.mjs';
import { _ as _typeof } from '../../_chunks/dep-8dbc9855.mjs';
import { _ as _defineProperty } from '../../_chunks/dep-7deaa3b9.mjs';
import { _ as _slicedToArray } from '../../_chunks/dep-b089fa1f.mjs';
import { toRefs, ref, computed, watch, createVNode, mergeProps } from 'vue';
import { i as intersection_1 } from '../../_chunks/dep-c628112b.mjs';
import { g as get_1 } from '../../_chunks/dep-cedc2818.mjs';
import { i as isFunction_1 } from '../../_chunks/dep-66473aa9.mjs';
import useDefaultValue from '../../hooks/useDefaultValue.mjs';
import { isRowSelectedDisabled } from '../../_common/js/table/utils.mjs';
import { Checkbox } from '../../checkbox/index.mjs';
import { Radio } from '../../radio/index.mjs';
import '../../_common/js/log/index.mjs';
import log from '../../_common/js/log/log.mjs';
import '../../_chunks/dep-8e411f1c.mjs';
import '../../_chunks/dep-cb814df4.mjs';
import '../../_chunks/dep-67e59a11.mjs';
import '../../_chunks/dep-cd533155.mjs';
import '../../_chunks/dep-ab439391.mjs';
import '../../_chunks/dep-60d62610.mjs';
import '../../_chunks/dep-10024af3.mjs';
import '../../_chunks/dep-2adf18a2.mjs';
import '../../_chunks/dep-1aab510a.mjs';
import '../../_chunks/dep-c4f80cb4.mjs';
import '../../_chunks/dep-996b4900.mjs';
import '../../_chunks/dep-3108c312.mjs';
import '../../_chunks/dep-715774e0.mjs';
import '../../_chunks/dep-5a5a1764.mjs';
import '../../_chunks/dep-93498383.mjs';
import '../../_chunks/dep-931fe368.mjs';
import '../../_chunks/dep-ca764006.mjs';
import '../../_chunks/dep-a4a3ac25.mjs';
import '../../_chunks/dep-013382c3.mjs';
import '../../_chunks/dep-6861d388.mjs';
import '../../_chunks/dep-396d852b.mjs';
import '../../_chunks/dep-a2db6df1.mjs';
import '../../_chunks/dep-8dae3bca.mjs';
import '../../_chunks/dep-bd7cd061.mjs';
import '../../_chunks/dep-96484611.mjs';
import '../../_chunks/dep-0e4de31a.mjs';
import '../../checkbox/checkbox.mjs';
import '../../checkbox/props.mjs';
import '../../hooks/useVModel.mjs';
import '../../hooks/useRipple.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-37e3e644.mjs';
import '../../_chunks/dep-31dc0415.mjs';
import '../../_chunks/dep-e5142249.mjs';
import '../../_chunks/dep-36582a92.mjs';
import '../../_chunks/dep-0f89a1dd.mjs';
import '../../_chunks/dep-d4da440a.mjs';
import '../../_chunks/dep-2ee9d497.mjs';
import '../../_chunks/dep-c545db54.mjs';
import '../../_chunks/dep-3f15cb30.mjs';
import '../../_chunks/dep-fd2b6c64.mjs';
import '../../_chunks/dep-30b3f256.mjs';
import '../../_chunks/dep-b3734774.mjs';
import '../../_chunks/dep-8a3fd140.mjs';
import '../../_chunks/dep-5db0da5c.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-bf19d9ba.mjs';
import '../../_chunks/dep-6963a882.mjs';
import '../../config-provider/type.mjs';
import '../../utils/set-style.mjs';
import '../../hooks/tnode.mjs';
import '../../_chunks/dep-f8909853.mjs';
import '../../_chunks/dep-d00e2e04.mjs';
import '../../_chunks/dep-ec2f76cc.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-60ee423b.mjs';
import '../../checkbox/constants.mjs';
import '../../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../../_common/js/utils/observe.mjs';
import '../../checkbox/hooks/useKeyboardEvent.mjs';
import '../../_common/js/common.mjs';
import '../../hooks/useDisabled.mjs';
import '../../_chunks/dep-03dfef8f.mjs';
import '../../checkbox/group.mjs';
import '../../_chunks/dep-ac561548.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../hooks/slot.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../checkbox/type.mjs';
import '../../radio/radio.mjs';
import '../../utils/helper.mjs';
import '../../_chunks/dep-807e1747.mjs';
import '../../_chunks/dep-413fbf03.mjs';
import '../../radio/props.mjs';
import '../../radio/constants.mjs';
import '../../form/hooks.mjs';
import '../../radio/group.mjs';
import '../../_chunks/dep-f14cdac0.mjs';
import '../../_chunks/dep-cd711cee.mjs';
import '../../_chunks/dep-cede586b.mjs';
import '../../_chunks/dep-665d45b4.mjs';
import '../../_chunks/dep-27be073b.mjs';
import '../../radio/radio-group-props.mjs';
import '../../radio/useKeyboard.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../watermark/hooks.mjs';
import '../../hooks/useResizeObserver.mjs';
import '../../radio/radio-button.mjs';
import '../../radio/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useRowSelect(props, tableSelectedClasses) {
  var _toRefs = toRefs(props),
    selectedRowKeys = _toRefs.selectedRowKeys,
    columns = _toRefs.columns,
    rowKey = _toRefs.rowKey,
    data = _toRefs.data,
    reserveSelectedRowOnPaginate = _toRefs.reserveSelectedRowOnPaginate;
  var currentPaginateData = ref(data.value);
  var selectedRowClassNames = ref();
  var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys"),
    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
    tSelectedRowKeys = _useDefaultValue2[0],
    setTSelectedRowKeys = _useDefaultValue2[1];
  var selectedRowDataMap = ref( /* @__PURE__ */new Map());
  var selectColumn = computed(function () {
    return props.columns.find(function (_ref) {
      var type = _ref.type;
      return ["multiple", "single"].includes(type);
    });
  });
  var selectionType = computed(function () {
    var _selectColumn$value;
    return props.rowSelectionType || ((_selectColumn$value = selectColumn.value) === null || _selectColumn$value === void 0 ? void 0 : _selectColumn$value.type) || "single";
  });
  var canSelectedRows = computed(function () {
    var currentData = reserveSelectedRowOnPaginate.value ? data.value : currentPaginateData.value;
    return currentData.filter(function (row, rowIndex) {
      return !isDisabled(row, rowIndex);
    });
  });
  var intersectionKeys = computed(function () {
    return intersection_1(tSelectedRowKeys.value, canSelectedRows.value.map(function (t) {
      return get_1(t, props.rowKey || "id");
    }));
  });
  var allowUncheck = computed(function () {
    var _selectColumn$value2;
    if (props.rowSelectionAllowUncheck) return true;
    var singleSelectCol = selectionType.value === "single";
    if (!singleSelectCol || !selectColumn.value || !("allowUncheck" in ((_selectColumn$value2 = selectColumn.value) === null || _selectColumn$value2 === void 0 ? void 0 : _selectColumn$value2.checkProps))) return false;
    return selectColumn.value.checkProps.allowUncheck;
  });
  watch([data, columns, tSelectedRowKeys, selectColumn, rowKey], function () {
    var _selectColumn$value3;
    var disabledRowFunc = function disabledRowFunc(p) {
      return selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : "";
    };
    var disabledRowClass = (_selectColumn$value3 = selectColumn.value) !== null && _selectColumn$value3 !== void 0 && _selectColumn$value3.disabled ? disabledRowFunc : void 0;
    var selected = new Set(tSelectedRowKeys.value);
    var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
      var row = _ref2.row;
      var rowId = get_1(row, props.rowKey || "id");
      return selected.has(rowId) ? tableSelectedClasses.selected : "";
    };
    var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
    selectedRowClassNames.value = [disabledRowClass, selectedRowClass];
  }, {
    immediate: true
  });
  function isDisabled(row, rowIndex) {
    return isRowSelectedDisabled(selectColumn.value, row, rowIndex);
  }
  function getSelectedHeader() {
    return function () {
      var isIndeterminate = intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;
      var isChecked = intersectionKeys.value.length !== 0 && canSelectedRows.value.length !== 0 && intersectionKeys.value.length === canSelectedRows.value.length;
      return createVNode(Checkbox, {
        "checked": isChecked,
        "indeterminate": isIndeterminate,
        "disabled": !canSelectedRows.value.length,
        "onChange": handleSelectAll
      }, null);
    };
  }
  function getRowSelectDisabledData(p) {
    var col = p.col,
      row = p.row,
      rowIndex = p.rowIndex;
    var disabled = isFunction_1(col.disabled) ? col.disabled({
      row: row,
      rowIndex: rowIndex
    }) : col.disabled;
    var checkProps = isFunction_1(col.checkProps) ? col.checkProps({
      row: row,
      rowIndex: rowIndex
    }) : col.checkProps;
    return {
      disabled: disabled || (checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled),
      checkProps: checkProps
    };
  }
  function renderSelectCell(p) {
    var column = p.col,
      _p$row = p.row,
      row = _p$row === void 0 ? {} : _p$row;
    var checked = tSelectedRowKeys.value.includes(get_1(row, props.rowKey || "id"));
    var _getRowSelectDisabled = getRowSelectDisabledData(p),
      disabled = _getRowSelectDisabled.disabled,
      checkProps = _getRowSelectDisabled.checkProps;
    var selectBoxProps = _objectSpread(_objectSpread({
      checked: checked,
      disabled: disabled
    }, checkProps), {}, {
      onClick: function onClick(e) {
        if (_typeof(e) === "object" && "e" in e) {
          var _e$e;
          (_e$e = e.e) === null || _e$e === void 0 || _e$e.stopPropagation();
        } else {
          e === null || e === void 0 || e.stopPropagation();
        }
      },
      onChange: function onChange() {
        return handleSelectChange(row);
      }
    });
    if (column.type === "single") return createVNode(Radio, selectBoxProps, null);
    if (column.type === "multiple") {
      var _props$indeterminateS;
      var isIndeterminate = (_props$indeterminateS = props.indeterminateSelectedRowKeys) !== null && _props$indeterminateS !== void 0 && _props$indeterminateS.length ? props.indeterminateSelectedRowKeys.includes(get_1(row, props.rowKey)) : false;
      return createVNode(Checkbox, mergeProps({
        "indeterminate": isIndeterminate
      }, selectBoxProps), null);
    }
    return null;
  }
  function handleSelectChange() {
    var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys.value);
    var reRowKey = props.rowKey || "id";
    var id = get_1(row, reRowKey);
    var selectedRowIndex = selectedRowKeys2.indexOf(id);
    var isExisted = selectedRowIndex !== -1;
    if (selectionType.value === "multiple") {
      isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
    } else if (selectionType.value === "single") {
      selectedRowKeys2 = isExisted && allowUncheck.value ? [] : [id];
    } else {
      log.warn("Table", "`column.type` must be one of `multiple` and `single`");
      return;
    }
    setTSelectedRowKeys(selectedRowKeys2, {
      selectedRowData: selectedRowKeys2.map(function (t) {
        return selectedRowDataMap.value.get(t);
      }),
      currentRowKey: id,
      currentRowData: row,
      type: isExisted ? "uncheck" : "check"
    });
  }
  function handleSelectAll(checked) {
    var _selectedRowKeys$valu;
    var reRowKey = props.rowKey || "id";
    var canSelectedRowKeys = canSelectedRows.value.map(function (record) {
      return get_1(record, reRowKey);
    });
    var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function (id) {
      return !canSelectedRowKeys.includes(id);
    })) || [];
    var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
    setTSelectedRowKeys(allIds, {
      selectedRowData: checked ? allIds.map(function (t) {
        return selectedRowDataMap.value.get(t);
      }) : [],
      type: checked ? "check" : "uncheck",
      currentRowKey: "CHECK_ALL_BOX"
    });
  }
  function formatToRowSelectColumn(col) {
    var isSelection = ["multiple", "single"].includes(col.type);
    if (!isSelection) return col;
    return _objectSpread(_objectSpread({}, col), {}, {
      width: col.width || 64,
      className: [tableSelectedClasses.checkCell, col.className],
      cell: function cell(_, p) {
        return renderSelectCell(p);
      },
      title: col.type === "multiple" ? getSelectedHeader() : col.title
    });
  }
  var onInnerSelectRowClick = function onInnerSelectRowClick(_ref3) {
    var row = _ref3.row,
      index = _ref3.index;
    var selectedColIndex = props.columns.findIndex(function (item) {
      return item.colKey === "row-select";
    });
    var disabled = false;
    if (selectedColIndex !== -1) {
      var _getRowSelectDisabled2;
      disabled = (_getRowSelectDisabled2 = getRowSelectDisabledData({
        row: row,
        rowIndex: index,
        col: props.columns[selectedColIndex],
        colIndex: selectedColIndex
      })) === null || _getRowSelectDisabled2 === void 0 ? void 0 : _getRowSelectDisabled2.disabled;
    }
    if (disabled) return;
    handleSelectChange(row);
  };
  watch([data, rowKey], function () {
    for (var i = 0, len = data.value.length; i < len; i++) {
      selectedRowDataMap.value.set(get_1(data.value[i], rowKey.value || "id"), data.value[i]);
    }
  }, {
    immediate: true
  });
  var showRowSelect = computed(function () {
    return Boolean(selectColumn.value || props.selectOnRowClick || props.selectedRowKeys);
  });
  var clearAllSelectedRowKeys = function clearAllSelectedRowKeys() {
    setTSelectedRowKeys([], {
      selectedRowData: [],
      currentRowKey: void 0,
      currentRowData: void 0,
      type: "uncheck"
    });
  };
  var handleRowSelectWithAreaSelection = function handleRowSelectWithAreaSelection(_ref4) {
    var activeRowList = _ref4.activeRowList,
      action = _ref4.action;
    if (!showRowSelect.value) return;
    if (action === "clear") {
      clearAllSelectedRowKeys();
      return;
    }
    if (action === "select-all") {
      handleSelectAll(true);
      return;
    }
    if (selectionType.value === "single") {
      if (action === "space-one-selection") {
        handleSelectChange(activeRowList[0].row);
      }
      return;
    }
    var validAreaSelection = activeRowList.filter(function (_ref5) {
      var row = _ref5.row,
        rowIndex = _ref5.rowIndex;
      return !getRowSelectDisabledData({
        row: row,
        rowIndex: rowIndex,
        col: selectColumn.value,
        colIndex: void 0
      }).disabled;
    });
    if (!validAreaSelection.length) return;
    var areaSelectionKeys = validAreaSelection.map(function (_ref6) {
      var row = _ref6.row;
      return get_1(row, props.rowKey);
    });
    var intersectionKeys2 = intersection_1(tSelectedRowKeys.value, areaSelectionKeys);
    var toCheck = intersectionKeys2.length !== areaSelectionKeys.length;
    var clearedKeys = tSelectedRowKeys.value.filter(function (key) {
      return !areaSelectionKeys.includes(key);
    });
    var newSelectedRowKeys = toCheck ? _toConsumableArray(new Set(tSelectedRowKeys.value.concat(areaSelectionKeys))) : clearedKeys;
    var currentRowData = action === "space-one-selection" ? activeRowList[0].row : void 0;
    setTSelectedRowKeys(newSelectedRowKeys, {
      selectedRowData: activeRowList,
      currentRowKey: get_1(currentRowData, props.rowKey),
      currentRowData: currentRowData,
      type: toCheck ? "check" : "uncheck"
    });
  };
  return {
    selectColumn: selectColumn,
    showRowSelect: showRowSelect,
    selectedRowClassNames: selectedRowClassNames,
    currentPaginateData: currentPaginateData,
    setTSelectedRowKeys: setTSelectedRowKeys,
    formatToRowSelectColumn: formatToRowSelectColumn,
    onInnerSelectRowClick: onInnerSelectRowClick,
    handleRowSelectWithAreaSelection: handleRowSelectWithAreaSelection
  };
}

export { useRowSelect as default };
//# sourceMappingURL=useRowSelect.mjs.map
