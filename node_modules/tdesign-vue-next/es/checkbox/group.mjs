/**
 * tdesign v1.9.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-8dbc9855.mjs';
import { _ as _toConsumableArray } from '../_chunks/dep-b15588b0.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-b089fa1f.mjs';
import { defineComponent, toRefs, ref, computed, watchEffect, provide, createVNode, mergeProps } from 'vue';
import { i as intersection_1 } from '../_chunks/dep-c628112b.mjs';
import { i as isObject_1 } from '../_chunks/dep-715774e0.mjs';
import { i as isUndefined_1 } from '../_chunks/dep-ac561548.mjs';
import _Checkbox from './checkbox.mjs';
import props from './checkbox-group-props.mjs';
import { CheckboxGroupInjectionKey } from './constants.mjs';
import useVModel from '../hooks/useVModel.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { useChildComponentSlots } from '../hooks/slot.mjs';
import '../_chunks/dep-8e411f1c.mjs';
import '../_chunks/dep-cb814df4.mjs';
import '../_chunks/dep-67e59a11.mjs';
import '../_chunks/dep-cd533155.mjs';
import '../_chunks/dep-ab439391.mjs';
import '../_chunks/dep-60d62610.mjs';
import '../_chunks/dep-10024af3.mjs';
import '../_chunks/dep-2adf18a2.mjs';
import '../_chunks/dep-1aab510a.mjs';
import '../_chunks/dep-c4f80cb4.mjs';
import '../_chunks/dep-996b4900.mjs';
import '../_chunks/dep-66473aa9.mjs';
import '../_chunks/dep-5a5a1764.mjs';
import '../_chunks/dep-3108c312.mjs';
import '../_chunks/dep-93498383.mjs';
import '../_chunks/dep-931fe368.mjs';
import '../_chunks/dep-ca764006.mjs';
import '../_chunks/dep-a4a3ac25.mjs';
import '../_chunks/dep-013382c3.mjs';
import '../_chunks/dep-6861d388.mjs';
import '../_chunks/dep-396d852b.mjs';
import '../_chunks/dep-a2db6df1.mjs';
import '../_chunks/dep-7deaa3b9.mjs';
import './props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-b3734774.mjs';
import '../_chunks/dep-e5142249.mjs';
import '../_chunks/dep-36582a92.mjs';
import '../_chunks/dep-0f89a1dd.mjs';
import '../_chunks/dep-d4da440a.mjs';
import '../_chunks/dep-2ee9d497.mjs';
import '../_chunks/dep-8a3fd140.mjs';
import '../_chunks/dep-5db0da5c.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-bf19d9ba.mjs';
import '../_chunks/dep-6963a882.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-37e3e644.mjs';
import '../_chunks/dep-31dc0415.mjs';
import '../_chunks/dep-c545db54.mjs';
import '../_chunks/dep-3f15cb30.mjs';
import '../_chunks/dep-fd2b6c64.mjs';
import '../_chunks/dep-30b3f256.mjs';
import '../config-provider/type.mjs';
import '../utils/set-style.mjs';
import './hooks/useCheckboxLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';
import './hooks/useKeyboardEvent.mjs';
import '../_common/js/common.mjs';
import '../hooks/useDisabled.mjs';
import '../_chunks/dep-03dfef8f.mjs';
import '../_chunks/dep-bd7cd061.mjs';
import '../_chunks/dep-96484611.mjs';
import '../_chunks/dep-f8909853.mjs';
import '../_chunks/dep-d00e2e04.mjs';
import '../_chunks/dep-ec2f76cc.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-60ee423b.mjs';

var _Group = defineComponent({
  name: "TCheckboxGroup",
  props: props,
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("checkbox-group");
    var renderTNodeJSX = useTNodeJSX();
    var isArray = Array.isArray;
    var _toRefs = toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var optionList = ref([]);
    var intersectionLen = computed(function () {
      if (!isArray(innerValue.value)) return 0;
      var values = optionList.value.map(function (item) {
        return item.value;
      });
      var n = intersection_1(innerValue.value, values);
      return n.length;
    });
    var isCheckAll = computed(function () {
      var optionItems = optionList.value.filter(function (item) {
        return !item.disabled && !item.checkAll;
      }).map(function (t) {
        return t.value;
      });
      var intersectionValues = intersection_1(optionItems, innerValue.value);
      return intersectionValues.length === optionItems.length;
    });
    var indeterminate = computed(function () {
      return !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0;
    });
    var maxExceeded = computed(function () {
      return !isUndefined_1(props2.max) && innerValue.value.length === props2.max;
    });
    watchEffect(function () {
      if (!props2.options) return [];
      optionList.value = props2.options.map(function (item) {
        return isObject_1(item) ? item : {
          label: String(item),
          value: item
        };
      });
    });
    var getAllCheckboxValue = function getAllCheckboxValue() {
      var val = /* @__PURE__ */new Set();
      for (var i = 0, len = optionList.value.length; i < len; i++) {
        var item = optionList.value[i];
        if (item.checkAll) continue;
        if (item.disabled) continue;
        val.add(item.value);
        if (maxExceeded.value) break;
      }
      return _toConsumableArray(val);
    };
    var onCheckAllChange = function onCheckAllChange(checked, context) {
      var value2 = checked ? getAllCheckboxValue() : [];
      setInnerValue(value2, {
        e: context.e,
        type: checked ? "check" : "uncheck",
        current: void 0,
        option: void 0
      });
    };
    var handleCheckboxChange = function handleCheckboxChange(data) {
      var currentValue = data.option.value;
      if (!isArray(innerValue.value)) {
        console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof(innerValue.value)));
        return;
      }
      var val = _toConsumableArray(innerValue.value);
      if (data.checked) {
        val.push(currentValue);
      } else {
        var i = val.indexOf(currentValue);
        val.splice(i, 1);
      }
      setInnerValue(val, {
        e: data.e,
        current: data.option.value,
        option: data.option,
        type: data.checked ? "check" : "uncheck"
      });
    };
    var onCheckedChange = function onCheckedChange(p) {
      var checked = p.checked,
        checkAll = p.checkAll,
        e = p.e;
      if (checkAll) {
        onCheckAllChange(checked, {
          e: e
        });
      } else {
        handleCheckboxChange(p);
      }
    };
    var getChildComponentSlots = useChildComponentSlots();
    var getOptionListBySlots = function getOptionListBySlots() {
      var nodes = getChildComponentSlots("Checkbox");
      var arr = [];
      nodes === null || nodes === void 0 || nodes.forEach(function (node) {
        var option = node.props;
        if (!option) return;
        if (option["check-all"] === "" || option["check-all"] === true) {
          option.checkAll = true;
        }
        arr.push(option);
      });
      return arr;
    };
    provide(CheckboxGroupInjectionKey, computed(function () {
      return {
        name: props2.name,
        isCheckAll: isCheckAll.value,
        checkedValues: innerValue.value || [],
        maxExceeded: maxExceeded.value,
        disabled: props2.disabled,
        indeterminate: indeterminate.value,
        handleCheckboxChange: handleCheckboxChange,
        onCheckedChange: onCheckedChange
      };
    }));
    return function () {
      var _props2$options;
      var children = null;
      if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
        var _optionList$value;
        children = (_optionList$value = optionList.value) === null || _optionList$value === void 0 ? void 0 : _optionList$value.map(function (option, index) {
          var _innerValue$value;
          return createVNode(_Checkbox, mergeProps({
            "key": "".concat(option.value || "").concat(index),
            "lazyLoad": props2.lazyLoad
          }, option, {
            "index": index,
            "checked": (_innerValue$value = innerValue.value) === null || _innerValue$value === void 0 ? void 0 : _innerValue$value.includes(option.value),
            "data": option
          }), null);
        });
      } else {
        var nodes = renderTNodeJSX("default");
        optionList.value = getOptionListBySlots();
        children = nodes;
      }
      return createVNode("div", {
        "class": COMPONENT_NAME.value,
        "role": "group",
        "aria-label": "checkbox-group"
      }, [children]);
    };
  }
});

export { _Group as default };
//# sourceMappingURL=group.mjs.map
