/**
 * tdesign v1.9.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-b089fa1f.mjs';
import { _ as _defineProperty } from '../_chunks/dep-7deaa3b9.mjs';
import { reactive, computed, toRefs, watch, nextTick } from 'vue';
import { i as isEqual_1 } from '../_chunks/dep-e32ac680.mjs';
import { i as isFunction_1 } from '../_chunks/dep-66473aa9.mjs';
import { i as isString_1 } from '../_chunks/dep-30b3f256.mjs';
import { TreeStore } from '../_common/js/tree/tree-store.mjs';
import { useFormDisabled } from '../form/hooks.mjs';
import useVModel from '../hooks/useVModel.mjs';
import useDefaultValue from '../hooks/useDefaultValue.mjs';
import { getTreeValue, isValueInvalid, isEmptyValues, getCascaderValue } from './core/helper.mjs';
import { treeNodesEffect, treeStoreExpendEffect } from './core/effect.mjs';
import '../_chunks/dep-8e411f1c.mjs';
import '../_chunks/dep-8dbc9855.mjs';
import '../_chunks/dep-cb814df4.mjs';
import '../_chunks/dep-e5142249.mjs';
import '../_chunks/dep-c4f80cb4.mjs';
import '../_chunks/dep-996b4900.mjs';
import '../_chunks/dep-3108c312.mjs';
import '../_chunks/dep-cd533155.mjs';
import '../_chunks/dep-715774e0.mjs';
import '../_chunks/dep-5a5a1764.mjs';
import '../_chunks/dep-93498383.mjs';
import '../_chunks/dep-36582a92.mjs';
import '../_chunks/dep-a2db6df1.mjs';
import '../_chunks/dep-0f89a1dd.mjs';
import '../_chunks/dep-2adf18a2.mjs';
import '../_chunks/dep-ab439391.mjs';
import '../_chunks/dep-60d62610.mjs';
import '../_chunks/dep-d4da440a.mjs';
import '../_chunks/dep-013382c3.mjs';
import '../_chunks/dep-ca764006.mjs';
import '../_chunks/dep-2ee9d497.mjs';
import '../_chunks/dep-1aab510a.mjs';
import '../_chunks/dep-230c1b47.mjs';
import '../_chunks/dep-31dc0415.mjs';
import '../_chunks/dep-c545db54.mjs';
import '../_chunks/dep-3f15cb30.mjs';
import '../_chunks/dep-fd2b6c64.mjs';
import '../_chunks/dep-12bcaf4a.mjs';
import '../_chunks/dep-0e4de31a.mjs';
import '../_chunks/dep-47d9c35e.mjs';
import '../_chunks/dep-bb900186.mjs';
import '../_chunks/dep-931fe368.mjs';
import '../_chunks/dep-67e59a11.mjs';
import '../_chunks/dep-10024af3.mjs';
import '../_chunks/dep-4481f632.mjs';
import '../_chunks/dep-396d852b.mjs';
import '../_chunks/dep-6861d388.mjs';
import '../_chunks/dep-a4a3ac25.mjs';
import '../_chunks/dep-f8909853.mjs';
import '../_chunks/dep-d00e2e04.mjs';
import '../_chunks/dep-ec2f76cc.mjs';
import '../_chunks/dep-96484611.mjs';
import '../_chunks/dep-8a3fd140.mjs';
import 'mitt';
import '../_common/js/tree/tree-node.mjs';
import '../_chunks/dep-f14cdac0.mjs';
import '../_chunks/dep-b15588b0.mjs';
import '../_chunks/dep-413fbf03.mjs';
import '../_chunks/dep-d0177ed3.mjs';
import '../_chunks/dep-03dfef8f.mjs';
import '../_chunks/dep-cd711cee.mjs';
import '../_chunks/dep-cedc2818.mjs';
import '../_chunks/dep-8dae3bca.mjs';
import '../_common/js/tree/tree-node-model.mjs';
import '../_chunks/dep-ac561548.mjs';
import '../_chunks/dep-8fdb2da0.mjs';
import '../_chunks/dep-d7c36095.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/log/index.mjs';
import '../_chunks/dep-bd7cd061.mjs';
import '../_chunks/dep-60ee423b.mjs';
import '../_chunks/dep-37e3e644.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var useContext = function useContext(props, setInnerValue, innerPopupVisible, setPopupVisible) {
  var statusContext = reactive({
    treeStore: null,
    inputVal: null,
    scopeVal: void 0,
    treeNodes: [],
    expend: []
  });
  return {
    statusContext: statusContext,
    cascaderContext: computed(function () {
      var size = props.size,
        checkStrictly = props.checkStrictly,
        lazy = props.lazy,
        multiple = props.multiple,
        filterable = props.filterable,
        clearable = props.clearable,
        checkProps = props.checkProps,
        max = props.max,
        disabled = props.disabled,
        showAllLevels = props.showAllLevels,
        minCollapsedNum = props.minCollapsedNum,
        valueType = props.valueType;
      return _objectSpread(_objectSpread({
        value: statusContext.scopeVal,
        size: size,
        checkStrictly: checkStrictly,
        lazy: lazy,
        multiple: multiple,
        filterable: filterable,
        clearable: clearable,
        checkProps: checkProps,
        max: max,
        disabled: disabled,
        showAllLevels: showAllLevels,
        minCollapsedNum: minCollapsedNum,
        valueType: valueType,
        visible: innerPopupVisible.value
      }, statusContext), {}, {
        setTreeNodes: function setTreeNodes(nodes) {
          statusContext.treeNodes = nodes;
        },
        setValue: function setValue(val, source, node) {
          if (isEqual_1(val, statusContext.scopeVal)) return;
          setInnerValue(val, {
            source: source,
            node: node
          });
        },
        setVisible: setPopupVisible,
        setInputVal: function setInputVal(val) {
          statusContext.inputVal = val;
        },
        setExpend: function setExpend(val) {
          statusContext.expend = val;
        }
      });
    })
  };
};
var useCascaderContext = function useCascaderContext(props) {
  var disabled = useFormDisabled();
  var _toRefs = toRefs(props),
    value = _toRefs.value,
    modelValue = _toRefs.modelValue,
    popupVisible = _toRefs.popupVisible;
  var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    innerValue = _useVModel2[0],
    setInnerValue = _useVModel2[1];
  var _useDefaultValue = useDefaultValue(popupVisible, false, props.onPopupVisibleChange, "popupVisible"),
    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
    innerPopupVisible = _useDefaultValue2[0],
    setPopupVisible = _useDefaultValue2[1];
  var _useContext = useContext(props, setInnerValue, innerPopupVisible, setPopupVisible),
    cascaderContext = _useContext.cascaderContext,
    statusContext = _useContext.statusContext;
  var isFilterable = computed(function () {
    return Boolean(props.filterable || isFunction_1(props.filter));
  });
  var updatedTreeNodes = function updatedTreeNodes() {
    var _cascaderContext$valu = cascaderContext.value,
      inputVal = _cascaderContext$valu.inputVal,
      treeStore = _cascaderContext$valu.treeStore,
      setTreeNodes = _cascaderContext$valu.setTreeNodes;
    treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);
  };
  var updateExpend = function updateExpend() {
    var _cascaderContext$valu2 = cascaderContext.value,
      value2 = _cascaderContext$valu2.value,
      treeStore = _cascaderContext$valu2.treeStore;
    var expend = statusContext.expend;
    treeStoreExpendEffect(treeStore, value2, expend);
    treeStore.replaceChecked(getTreeValue(value2));
  };
  watch(function () {
    return props.options;
  }, function () {
    var options = props.options,
      _props$keys = props.keys,
      keys = _props$keys === void 0 ? {} : _props$keys,
      checkStrictly = props.checkStrictly,
      lazy = props.lazy,
      load = props.load,
      valueMode = props.valueMode;
    var treeStore = statusContext.treeStore;
    if (!options.length && !treeStore) return;
    if (!treeStore) {
      var store = new TreeStore({
        keys: _objectSpread(_objectSpread({}, keys), {}, {
          children: isString_1(keys.children) ? keys.children : "children"
        }),
        checkable: true,
        expandMutex: true,
        expandParent: true,
        lazy: lazy,
        load: load,
        valueMode: valueMode,
        checkStrictly: checkStrictly,
        onLoad: function onLoad() {
          nextTick(function () {
            store.refreshNodes();
            updatedTreeNodes();
          });
        }
      });
      store.append(options);
      statusContext.treeStore = store;
    } else {
      treeStore.reload(options);
      treeStore.refreshNodes();
    }
    updateExpend();
    updatedTreeNodes();
  }, {
    immediate: true,
    deep: true
  });
  watch(function () {
    var checkStrictly = props.checkStrictly,
      lazy = props.lazy,
      load = props.load,
      valueMode = props.valueMode;
    return JSON.stringify({
      valueMode: valueMode,
      checkStrictly: checkStrictly,
      lazy: lazy,
      load: load
    });
  }, function () {
    var treeStore = statusContext.treeStore;
    if (!treeStore) return;
    var checkStrictly = props.checkStrictly,
      lazy = props.lazy,
      load = props.load,
      valueMode = props.valueMode;
    var treeProps = {
      checkStrictly: checkStrictly,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode
    };
    treeStore.setConfig(treeProps);
  }, {
    immediate: true
  });
  watch(innerValue, function () {
    var _cascaderContext$valu3 = cascaderContext.value,
      setValue = _cascaderContext$valu3.setValue,
      multiple = _cascaderContext$valu3.multiple,
      valueType = _cascaderContext$valu3.valueType;
    if (isValueInvalid(innerValue.value, cascaderContext.value)) {
      setValue(multiple ? [] : "", "invalid-value");
    } else {
      statusContext.scopeVal = multiple ? [] : "";
    }
    if (!isEmptyValues(innerValue)) {
      statusContext.scopeVal = getCascaderValue(innerValue.value, valueType, multiple);
    }
    if (!statusContext.treeStore) return;
    updateExpend();
    updatedTreeNodes();
  }, {
    immediate: true
  });
  watch(function () {
    return innerPopupVisible.value && isFilterable.value;
  }, function (visible) {
    var setInputVal = cascaderContext.value.setInputVal;
    if (visible) {
      setInputVal("");
    }
  });
  watch(function () {
    return statusContext.inputVal;
  }, function () {
    updatedTreeNodes();
  });
  var getCascaderItems = function getCascaderItems(arrValue) {
    var options = [];
    arrValue.forEach(function (value2) {
      var _statusContext$treeSt;
      var nodes = (_statusContext$treeSt = statusContext.treeStore) === null || _statusContext$treeSt === void 0 ? void 0 : _statusContext$treeSt.getNodes(value2);
      nodes && nodes[0] && options.push(nodes[0].data);
    });
    return options;
  };
  return {
    cascaderContext: cascaderContext,
    isFilterable: isFilterable,
    innerValue: innerValue,
    getCascaderItems: getCascaderItems
  };
};

export { useCascaderContext, useContext };
//# sourceMappingURL=hooks.mjs.map
