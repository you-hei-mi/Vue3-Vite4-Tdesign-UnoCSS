/**
 * tdesign v1.9.0
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-b089fa1f.mjs';
import { toRefs, computed, ref, watchEffect } from 'vue';
import { g as getDefaultFormat, d as extractTimeFormat, a as formatTime, p as parseToDayjs, f as formatDate, c as isValidDate } from '../../_chunks/dep-b0329b6c.mjs';
import useVModel from '../../hooks/useVModel.mjs';
import '../../_chunks/dep-8e411f1c.mjs';
import '../../_chunks/dep-30b3f256.mjs';
import '../../_chunks/dep-cb814df4.mjs';
import '../../_chunks/dep-cd533155.mjs';
import '../../_chunks/dep-8dbc9855.mjs';
import '../../_chunks/dep-ab439391.mjs';
import '../../_chunks/dep-60d62610.mjs';
import '../../_chunks/dep-2adf18a2.mjs';
import '../../_chunks/dep-bf19d9ba.mjs';
import '../../_chunks/dep-7deaa3b9.mjs';
import '../../_chunks/dep-66473aa9.mjs';
import '../../_chunks/dep-715774e0.mjs';
import '../../_chunks/dep-5a5a1764.mjs';
import '../../_chunks/dep-bfc3d601.mjs';
import '../../_chunks/dep-27be073b.mjs';
import '../../_chunks/dep-10024af3.mjs';
import '../../_chunks/dep-ec2f76cc.mjs';
import '../../_chunks/dep-5db0da5c.mjs';
import '../../_chunks/dep-93498383.mjs';
import '../../_chunks/dep-013382c3.mjs';
import '../../_chunks/dep-3108c312.mjs';
import '../../_chunks/dep-2ee9d497.mjs';
import '../../_common/js/log/index.mjs';
import '../../_common/js/log/log.mjs';
import '../../_chunks/dep-bd7cd061.mjs';
import '../../_chunks/dep-96484611.mjs';
import '../../_chunks/dep-67e59a11.mjs';

function useSingleValue(props) {
  var _toRefs = toRefs(props),
    valueFromProps = _toRefs.value,
    modelValue = _toRefs.modelValue;
  var _useVModel = useVModel(valueFromProps, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    value = _useVModel2[0],
    onChange = _useVModel2[1];
  var formatRef = computed(function () {
    return getDefaultFormat({
      mode: props.mode,
      format: props.format,
      enableTimePicker: props.enableTimePicker
    });
  });
  if (props.enableTimePicker) {
    if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
  }
  var time = ref(formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime));
  var month = ref(parseToDayjs(value.value, formatRef.value.format).month());
  var year = ref(parseToDayjs(value.value, formatRef.value.format).year());
  var cacheValue = ref(formatDate(value.value, {
    format: formatRef.value.format
  }));
  watchEffect(function () {
    if (!value.value) {
      cacheValue.value = "";
      return;
    }
    if (!isValidDate(value.value, formatRef.value.format)) return;
    cacheValue.value = formatDate(value.value, {
      format: formatRef.value.format
    });
    time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime);
  });
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    cacheValue: cacheValue,
    onChange: onChange
  };
}

export { useSingleValue as default };
//# sourceMappingURL=useSingleValue.mjs.map
