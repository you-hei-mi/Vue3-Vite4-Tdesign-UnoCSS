/**
 * tdesign v1.9.0
 * (c) 2024 tdesign
 * @license MIT
 */

import './dep-cb814df4.mjs';
import { i as isArrayLike_1 } from './dep-013382c3.mjs';
import { i as isObjectLike_1 } from './dep-2adf18a2.mjs';
import { i as identity_1 } from './dep-6861d388.mjs';
import { _ as _overRest, a as _setToString } from './dep-396d852b.mjs';

var isArrayLike = isArrayLike_1,
  isObjectLike = isObjectLike_1;

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}
var isArrayLikeObject_1 = isArrayLikeObject;

var identity = identity_1,
  overRest = _overRest,
  setToString = _setToString;

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}
var _baseRest = baseRest;

export { _baseRest as _, isArrayLikeObject_1 as i };
//# sourceMappingURL=dep-a4a3ac25.mjs.map
